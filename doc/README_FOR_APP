(Note the html version of the file)
Use this README file to introduce your application and point to useful places in the API for learning more.
Run "rake doc:app" to generate API documentation for your models, controllers, helpers, and libraries.
Run "rails_best_practices" to get some hints on how to improve the code.

## Architecture
This file is for development doc, /README is for user documentation.
please update CHANGELOG to state any new functionality or amend on existing functionality.

All files named application are meant for things that applies and make sense application wide.
Use then application_layout to refer to anything that should apply only to the layout and not to the templete, despite things written in there may apply to templates as well.
E.g.: br_tag is defined in application_helper.rb because it is meant to be used all along the app, au contraire flash_messages belongs to application_layout because despite the method is available in templates as well, it makes sense only in the layout.

Evaluate RESTFUL architecture, use HTTP verbs correctly.

Use css_content, Use js_content, title_content to customize the outside of the template

Class_extension contains all ruby/rails class/module extensions, read it!

TestsController has been made as a sandbox, never leave important things over there.

On top of each file there is the file documentation, valid for extensions:
rb, yml, js, css, (html)

Use gtg to commit your job, use significant comments and group them by task.
Use different a different branch for each functionality. 

## Authentification
With devise, the effort is to keep one single model to represent the user (no need for a profile model).
The validations only occurs on basic Devise known fields, e.g.: name is not mandatory but gets generated automatically if not profided.

## Comments
Gemfile: put useful comments inline, like commands to run
Comment every new methos or function, no particular formatting
Don't forget to state a meaningful example with eg: or ie:
Also use NOTE: and TODO: accordingly.

## Code conventions
Composed words can be considered one, e.g.: datepicker and not date_picker
Use correct conventions for each languate, e.g.: #log-links for css, but the ruby fucntion has to be log_links

Don't use parentesis for methods, but only in simple statements, use parentesis in doubt.


## Css and html
Name all the stylesheets in css.scss and include them in application.css.scss
Use html5 tags and attributes (focus, placeholders) where applicable, avoid tables if it makes sense.
Links to external sites must open in a different tab.
Use `%body#controller_name_controller` css filess for resource specific style. 
Convention to separate words in css elements is underscore.

## Javascript
Favour jquery plugins for your development, run your js at the bottom of each model.js file on document ready, NEVER write js in templates.
Rather than types, use id as selectors unless it makes perfectly sense, so when there is an id you can eventually search for than name to see if there is any jquery associated.
`init.js.coffee` contains global constants and functions.
Each controller related file (eg: users.js.coffee) will have two sections:
In the first one put the functions that will have a direct effect on the site;
In the second one, wrapped on document layer put the events for selectors.
eg: see users.js.coffee
Do not split behaviors, all the action that follows a js action has to be fully taken in the js template or from the jquery bindings, but not half here and half there.
Eg: save user note, hide the form with a jQuery binding and showing the flash message in the js template has to be avoided. 

## Images
set from icojoy (http://www.iconfinder.com/search/?q=iconset%3Aicojoy)
ico: 24x24

## Doc
- rails_best_practices
- rake app:doc
- [use markdown](http://nv.github.com/github-live-preview/examples/commit.html)


## Development tools

- pry: debug the app with pry.debug, cosole with pry -r ./config/environment
- TODO: followed by a quick description
- logger.warn 'TODO: this (fucntion description) has been MOCKED UP'

# Cloud `TODO`
- git for the repo
- git issues for functionality proposals
- lighthouse for small bugs
- heroku for live

## Test tools
guard
Run `rake db:test:prepare` before run the tests

## Heroku
see more info in Gemfile


 